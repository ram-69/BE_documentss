# -*- coding: utf-8 -*-
"""uber.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15NnzSjH5xhyfrAE5DeRcUEd6JFG0QH4X
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/uber.csv")

df.head()

df.info()

df.shape

"""**Preprocessing the Dataset**"""

df.isnull().sum()

#dropping rows with missing values

df.dropna(inplace = True)

df.isnull().sum()

#dropping unwanted columns

df.drop(labels='Unnamed: 0',axis=1,inplace=True)
df.drop(labels='key',axis=1,inplace=True)

df.head()

#converting datatype of column "pickup_datetime" from object to DateTime

df["pickup_datetime"] = pd.to_datetime(df["pickup_datetime"])

df.dtypes

df.describe()

"""**Identify Outliers**"""

# data visualization
# plotting distribution plot

import warnings
warnings.filterwarnings("ignore", category=FutureWarning)
sns.distplot(df['fare_amount'])
plt.show()

sns.distplot(df['pickup_latitude'])
plt.show()

sns.distplot(df['pickup_longitude'])
plt.show()

sns.distplot(df['dropoff_longitude'])
plt.show()

sns.distplot(df['dropoff_latitude'])
plt.show()

#creating a function to identify outliers

def find_outliers_IQR(df):
   q1 = df.quantile(0.25)
   q3 = df.quantile(0.75)
   IQR = q3-q1
   outliers = df[((df<(q1-1.5*IQR)) | (df>(q3+1.5*IQR)))]
   return outliers

#getting outlier details for column "fair_amount" using the above function

outliers = find_outliers_IQR(df["fare_amount"])
print("number of outliers: "+ str(len(outliers)))
print("max outlier value: "+ str(outliers.max()))
print("min outlier value: "+ str(outliers.min()))
outliers

#you can also pass two columns as argument to the function (here "passenger_count" and "fair_amount")

outliers = find_outliers_IQR(df[["passenger_count","fare_amount"]])
outliers

#upper and lower limit which can be used for capping of outliers

upper_limit = df['fare_amount'].mean() + 3*df['fare_amount'].std()
print(upper_limit)
lower_limit = df['fare_amount'].mean() - 3*df['fare_amount'].std()
print(lower_limit)

"""**3. Check the correlation**"""

#creating a correlation matrix

corrMatrix = df.corr()
sns.heatmap(corrMatrix, annot=True,cmap="crest")
plt.show()

#splitting column "pickup_datetime" into 5 columns: "day", "hour", "month", "year", "weekday"
#for a simplified view

import calendar
df['day']=df['pickup_datetime'].apply(lambda x:x.day)
df['hour']=df['pickup_datetime'].apply(lambda x:x.hour)
df['month']=df['pickup_datetime'].apply(lambda x:x.month)
df['year']=df['pickup_datetime'].apply(lambda x:x.year)
df['weekday']=df['pickup_datetime'].apply(lambda x: calendar.day_name[x.weekday()])

df.drop(['pickup_datetime'],axis =1 , inplace = True)

#label encoding (categorical to numerical)

df.weekday = df.weekday.map({'Sunday':0,'Monday':1,'Tuesday':2,'Wednesday':3,'Thursday':4,'Friday':5,'Saturday':6})

df.head()

df.info()

#splitting the data into train and test

from sklearn.model_selection import train_test_split

#independent variables (x)

x=df.drop("fare_amount", axis=1)
x

#dependent variable (y)

y=df["fare_amount"]

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=101)

x_train.head()

x_test.head()

y_train.head()

y_test.head()

print(x_train.shape)
print(x_test.shape)
print(y_test.shape)
print(y_train.shape)

"""4. Implement linear regression and random forest regression models.
5. Evaluate the models and compare their respective scores like R2, RMSE, etc.
"""

#Linear Regression

from sklearn.linear_model import LinearRegression
lrmodel=LinearRegression()
lrmodel.fit(x_train, y_train)

predictedvalues = lrmodel.predict(x_test)

#Calculating the value of RMSE for Linear Regression

from sklearn.metrics import mean_squared_error
lrmodelrmse = np.sqrt(mean_squared_error(predictedvalues, y_test))
print("RMSE value for Linear regression is", lrmodelrmse)

#Random Forest Regression

from sklearn.ensemble import RandomForestRegressor
rfrmodel = RandomForestRegressor(n_estimators=100, random_state=101)

rfrmodel.fit(x_train,y_train)
rfrmodel_pred= rfrmodel.predict(x_test)

#Calculating the value of RMSE for Random Forest Regression

rfrmodel_rmse=np.sqrt(mean_squared_error(rfrmodel_pred, y_test))
print("RMSE value for Random forest regression is ",rfrmodel_rmse)

rfrmodel_pred.shape

"""Predict the price of the Uber ride"""

test = pd.read_csv("https://raw.githubusercontent.com/piyushpandey758/Uber-Fare-Prediction/master/testt.csv")

test.head()

test.drop(test[['Unnamed: 0.1.1','Unnamed: 0','Unnamed: 0.1','key']],axis=1,inplace=True)

test.isnull().sum()

#converting datatype of column "pickup_datetime" from object to DateTime

test["pickup_datetime"] = pd.to_datetime(test["pickup_datetime"])

#splitting column "pickup_datetime" into 5 columns: "day", "hour", "month", "year", "weekday"
#for a simplified view
#label encoding weekdays

test['day']=test['pickup_datetime'].apply(lambda x:x.day)
test['hour']=test['pickup_datetime'].apply(lambda x:x.hour)
test['month']=test['pickup_datetime'].apply(lambda x:x.month)
test['year']=test['pickup_datetime'].apply(lambda x:x.year)
test['weekday']=test['pickup_datetime'].apply(lambda x: calendar.day_name[x.weekday()])

test.weekday = test.weekday.map({'Sunday':0,'Monday':1,'Tuesday':2,'Wednesday':3,'Thursday':4,'Friday':5,'Saturday':6})

test.drop(['pickup_datetime'], axis = 1, inplace = True)

test.head(5)

#Prediction!

rfrmodel_pred= rfrmodel.predict(test)

df_pred = pd.DataFrame(rfrmodel_pred)
df_pred

#to_csv() function exports the DataFrame to CSV format

df_pred.to_csv('prediction.csv')