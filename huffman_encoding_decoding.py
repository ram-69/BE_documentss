# -*- coding: utf-8 -*-
"""Huffman_encoding\decoding.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nqQemvi9IcpzQh2V74gRTVBY9RZAdzBW
"""

#  A Huffman Tree Node
import heapq
l=[]
class node:
	def __init__(self, freq, symbol, left=None, right=None):
		self.freq = freq
		self.symbol = symbol
		self.left = left
		self.right = right
		self.huff = ''
		
	def __lt__(self, nxt):
		return self.freq < nxt.freq
		
def printNodes(node, val=''):	
	newVal = val + str(node.huff)
	if(node.left):
		printNodes(node.left, newVal)
	if(node.right):
		printNodes(node.right, newVal)
	if(not node.left and not node.right):
		print(f"{node.symbol} -> {newVal}")
		temp=[]
		temp.append(node.symbol)
		temp.append(newVal)
		l.append(temp)

s=" A statement of purpose is a document often attached to an academic application letter to describe the candidate’s interest in a program or institution. It highlights the applicant’s education, background, interests, experience, relevant work, and talents."
print(s)
chars=sorted(set(s))
freq=[]
for i in range(len(chars)):
  freq.append(0)
  for j in range(len(s)):
    if(chars[i]==s[j]):
      freq[i]+=1
    else:
      continue
print(chars)
print(freq)

import heapq
nodes = []
for x in range(len(chars)):
	heapq.heappush(nodes, node(freq[x], chars[x]))

while len(nodes) > 1:
	left = heapq.heappop(nodes)
	right = heapq.heappop(nodes)
	left.huff = 0
	right.huff = 1
	newNode = node(left.freq+right.freq, left.symbol+right.symbol, left, right)

	heapq.heappush(nodes, newNode)

printNodes(nodes[0])
# print(l)

# Encrypt the text
encrypt=""
for i in range(len(s)):
  for j in range(len(l)):
    if(s[i]==l[j][0]):
      encrypt+=l[j][1]
    else:
      continue
print(encrypt)

# Decrypt the text
init=0

while(init<len(encrypt)):
  for i in range(len(l)):
    if(l[i][1] == encrypt[init:init+len(l[i][1])]):
      print(l[i][0],end="")
      init+=len(l[i][1])
      break